<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <Version>1.0.0.0</Version>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <AssemblyName>Calamari</AssemblyName>
    <OutputType>Exe</OutputType>
    <PackageId>Calamari</PackageId>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <PackageProjectUrl>https://github.com/OctopusDeploy/Calamari</PackageProjectUrl>
    <PackageLicense>https://github.com/OctopusDeploy/Calamari/blob/main/LICENSE.txt</PackageLicense>
    <Authors>Octopus Deploy</Authors>
    <Copyright>Octopus Deploy Pty Ltd</Copyright>
    <PackageTags>tool</PackageTags>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/OctopusDeploy/Calamari/</RepositoryUrl>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Description>Contains the command-line Calamari tool that is used by Tentacle to perform depoyment actions on machines.</Description>
    <Product>Calamari</Product>
    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;linux-arm;linux-arm64</RuntimeIdentifiers>
    <ApplicationManifest>Calamari.exe.manifest</ApplicationManifest>
    <TargetFrameworks>net462;net6.0</TargetFrameworks>
    <LangVersion>8</LangVersion>
    <!-- CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. -->
    <NoWarn>CS8632</NoWarn>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <TargetFrameworks>net462;net8.0</TargetFrameworks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net462' ">
    <DefineConstants>$(DefineConstants);IIS_SUPPORT;</DefineConstants>
    <PlatformTarget>anycpu</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <!--
	The net462 build is the one that pulls in the AWS and Azure extensions. We treat
	this build as the "Cloud" build.
  -->
  <ItemGroup>
    <ProjectReference Include="..\Calamari.Aws\Calamari.Aws.csproj" />
    <ProjectReference Include="..\Calamari.Azure\Calamari.Azure.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Analyzers.Compatibility" Version="0.2.12-alpha">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <ProjectReference Include="..\Calamari.Common\Calamari.Common.csproj" />
    <ProjectReference Include="..\Calamari.Shared\Calamari.Shared.csproj" />
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies.net462" Version="1.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Web.Administration" Version="11.1.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Octokit" Version="14.0.0" />
    <PackageReference Include="Octopus.Versioning" Version="5.1.876" />
    <PackageReference Include="Octopus.TinyTypes" Version="2.2.1156" />
    <PackageReference Include="Octopus.CoreUtilities" Version="2.1.449" />
    <PackageReference Include="SharpCompress" Version="0.37.2" />
    <PackageReference Include="System.Text.Json" Version="8.0.5" />
    <PackageReference Include="YamlDotNet" Version="16.3.0" />
    <PackageReference Include="System.ValueTuple" Version="4.5.0" />
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFrameworkIdentifier)' == '.NETFramework' ">
    <Reference Include="System.ComponentModel.DataAnnotations" />
    <Reference Include="System.Configuration.Install" />
    <Reference Include="System.Core" />
    <Reference Include="System.DirectoryServices" />
    <Reference Include="System.Net" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <Reference Include="WindowsBase" />
    <Reference Include="System" />
    <Reference Include="System.Security" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Autofac" Version="4.8.0" />
    <PackageReference Include="System.ComponentModel.TypeConverter" Version="4.3.0" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Kubernetes\Scripts\AzurePowershellContext.ps1" />
    <EmbeddedResource Include="Scripts\**" />
    <None Update="Calamari.exe.manifest">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFramework)' == 'net6.0' ">
    <PackageReference Include="KubernetesClient" Version="15.0.1" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net6.0'">
    <PackageReference Include="LibGit2Sharp" Version="0.30.0" />
  </ItemGroup>
  <!--
    In netcore 2.1.3, the framework stopped calculating package definitions automatically "for perf"
    (see https://github.com/dotnet/sdk/issues/2342)
    So, we need to add a dependency onto `GetToolFiles` to calculate them first.
    Unfortunately, RunResolvePackageDependencies doesn't exist for the full fat framework, so we
    define a new empty target if it's not already defined to keep it happy.
  -->
  <Target Name="RunResolvePackageDependencies" Condition="'$(RunResolvePackageDependencies)' != ''" />
  <Target Name="GetToolFiles" DependsOnTargets="RunResolvePackageDependencies">
    <ItemGroup>
      <DotnetScriptFiles Include="$(MSBuildProjectDirectory)/../Calamari.Scripting/DotnetScript/dotnet-script.*.zip"/>
    </ItemGroup>
  </Target>
  <Target Name="CopyDotnetScriptFilesAfterBuild" AfterTargets="Build" DependsOnTargets="GetToolFiles">
    <Unzip SourceFiles="@(DotnetScriptFiles)" DestinationFolder="$(OutDir)/" />
  </Target>
  <Target Name="CopyDotnetScriptFilesAfterPublish" AfterTargets="Publish" DependsOnTargets="GetToolFiles">
    <Unzip SourceFiles="@(DotnetScriptFiles)" DestinationFolder="$(PublishDir)/" />
  </Target>
</Project>
