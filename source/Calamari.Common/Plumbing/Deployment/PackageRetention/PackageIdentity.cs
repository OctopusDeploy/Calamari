using System;
using Newtonsoft.Json;
using Octopus.Versioning;

namespace Calamari.Common.Plumbing.Deployment.PackageRetention
{
    public class PackageIdentity
    {
        public PackageId PackageId { get; }

        [JsonConverter(typeof(VersionConverter))]
        public IVersion Version { get; }

        public PackagePath Path { get; }


        [JsonConstructor]
        public PackageIdentity(PackageId packageId, IVersion version, PackagePath path)
        {
            PackageId = packageId ?? throw new ArgumentNullException(nameof(packageId));
            Version = version ?? throw new ArgumentNullException(nameof(version));
            Path = path ?? throw new ArgumentNullException(nameof(path));
        }

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj) || obj.GetType() != GetType())
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            var other = (PackageIdentity)obj;
            return this == other;
        }

        protected bool Equals(PackageIdentity other)
        {
            return Equals(PackageId, other.PackageId)
                   && Equals(Version, other.Version)
                   && Equals(Path, other.Path);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                //Generated by rider
                return (PackageId.GetHashCode() * 397) ^ Version.GetHashCode();
            }
        }

        public static bool operator ==(PackageIdentity first, PackageIdentity second)
        {
            return first.Equals(second);
        }

        public static bool operator !=(PackageIdentity first, PackageIdentity second)
        {
            return !(first == second);
        }

        public override string ToString()
        {
            return $"{PackageId} v{Version}";
        }
    }
}