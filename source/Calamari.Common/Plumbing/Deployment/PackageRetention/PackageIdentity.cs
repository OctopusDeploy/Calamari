using System;
using System.Collections.Generic;
using System.Linq;
using Calamari.Common.Features.Packages;
using Calamari.Common.Plumbing.Commands;
using Calamari.Common.Plumbing.Commands.Options;
using Calamari.Common.Plumbing.Deployment.PackageRetention.VersionFormatDiscovery;
using Calamari.Common.Plumbing.FileSystem;
using Calamari.Common.Plumbing.Variables;
using Calamari.Deployment.PackageRetention;
using Newtonsoft.Json;
using Octopus.Versioning;
using Octopus.Versioning.Semver;
namespace Calamari.Common.Plumbing.Deployment.PackageRetention
{
    public class PackageIdentity
    {
        public PackageId PackageId { get; }
        public IVersion Version { get; }
        public string? Path { get; }
        public long FileSizeBytes { get; private set; } = -1;


        public PackageIdentity(string packageId, string version, long fileSizeBytes, VersionFormat versionFormat = VersionFormat.Semver, string? path = null)
            : this(new PackageId(packageId), VersionFactory.CreateVersion(version, versionFormat), path)
        {
            FileSizeBytes = fileSizeBytes;
        }

        public PackageIdentity(string packageId, string version, VersionFormat versionFormat = VersionFormat.Semver, string? path = null)
            : this(new PackageId(packageId), VersionFactory.CreateVersion(version, versionFormat), path)
        {
        }

        public PackageIdentity(IVariables variables, VersionFormat versionFormat = VersionFormat.Semver)
        {
            if (variables == null) throw new ArgumentNullException(nameof(variables));

            var package = variables.Get(PackageVariables.PackageId) ?? throw new Exception("Package ID not found.");
            var version = variables.Get(PackageVariables.PackageVersion) ?? throw new Exception("Package Version not found.");
            Path = variables.Get(TentacleVariables.CurrentDeployment.PackageFilePath);

            var nullableVersion = VersionFactory.TryCreateVersion(version, versionFormat);
            Version = nullableVersion ?? throw new Exception("Unable to determine package version.");

            PackageId = new PackageId(package);
        }

        [JsonConstructor]
        public PackageIdentity(PackageId packageId, IVersion version, string? path = null)
        {
            PackageId = packageId ?? throw new ArgumentNullException(nameof(packageId));
            Version = version ?? throw new ArgumentNullException(nameof(version));
            Path = path;
        }

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj) || obj.GetType() != GetType())
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            var other = (PackageIdentity)obj;
            return this == other;
        }

        protected bool Equals(PackageIdentity other)
        {
            return Equals(PackageId, other.PackageId)
                   && Equals(Version, other.Version);
        }

        public override int GetHashCode()
        {
            unchecked
            {   //Generated by rider
                return (PackageId.GetHashCode() * 397) ^ Version.GetHashCode();
            }
        }

        public static bool operator == (PackageIdentity first, PackageIdentity second)
        {
            return first.PackageId == second.PackageId && first.Version.Equals(second.Version);
        }

        public static bool operator !=(PackageIdentity first, PackageIdentity second)
        {
            return !(first == second);
        }
        
        public override string ToString()
        {
            return $"{PackageId} v{Version}";
        }

        static List<ITryToDiscoverVersionFormat> versionFormatDiscoverers = new List<ITryToDiscoverVersionFormat>();

        public static void SetVersionFormatDiscoverers(params ITryToDiscoverVersionFormat[] formatDiscoverers)
        {
            versionFormatDiscoverers = new List<ITryToDiscoverVersionFormat>(formatDiscoverers);
        }

        /// <summary>
        /// Creates a 
        /// </summary>
        /// <param name="journal"></param>
        /// <param name="variables"></param>
        /// <param name="commandLineArguments"></param>
        /// <param name="packageId"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        /// <exception cref="Exception"></exception>
        public static PackageIdentity CreatePackageIdentity(IManagePackageUse journal, IVariables variables, string[] commandLineArguments, string? packageId = null, string? version = null )
        {
            var versionStr = version ?? variables.Get(PackageVariables.PackageVersion) ?? throw new Exception("Package Version not found.");
            var packagePath = variables.Get(TentacleVariables.CurrentDeployment.PackageFilePath);

            var packageIdObj = PackageId.CreatePackageId(packageId, variables, commandLineArguments);

            var versionFormat = VersionFormat.Semver;
            // ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            versionFormatDiscoverers.FirstOrDefault(d => d.TryDiscoverVersionFormat(journal, variables, commandLineArguments, out versionFormat));

            return new PackageIdentity(packageIdObj, VersionFactory.CreateVersion(versionStr, versionFormat), packagePath);
        }

        public void UpdatePackageSize()
        {
            if (FileSizeBytes > 0) return;
            if (string.IsNullOrWhiteSpace(Path))
            {
                FileSizeBytes = -1;
                return;
            }

            try
            {
                FileSizeBytes = CalamariPhysicalFileSystem.GetPhysicalFileSystem().GetFileSize(Path);
            }
            catch// (FileNotFoundException ex)
            {
                //TODO: work out what to do here.
                throw;
            }
        }
    }
}