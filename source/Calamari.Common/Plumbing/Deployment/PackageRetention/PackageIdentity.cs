using System;
using Calamari.Common.Plumbing.Variables;
using Calamari.Deployment.PackageRetention;
using Newtonsoft.Json;
using Octopus.Versioning;
using Octopus.Versioning.Semver;

namespace Calamari.Common.Plumbing.Deployment.PackageRetention
{
    public class PackageIdentity
    {
        public PackageId PackageId { get; }
        public string Version { get; }

        public PackageIdentity(string packageId, string version) : this(new PackageId(packageId), version)
        {
        }

        public PackageIdentity(IVariables variables)
        {
            if (variables == null) throw new ArgumentNullException(nameof(variables));

            var package = variables.Get(PackageVariables.PackageId) ?? throw new Exception("Package ID not found.");
            var version =  variables.Get(PackageVariables.PackageVersion) ?? throw new Exception("Package Version not found.");

            PackageId = new PackageId(package);
            Version = version;
        }

        [JsonConstructor]
        public PackageIdentity(PackageId packageId, string version)
        {
            PackageId = packageId ?? throw new ArgumentNullException(nameof(packageId));
            Version = version ?? throw new ArgumentNullException(nameof(version));
        }


        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj) || obj.GetType() != this.GetType())
                return false;
            if (ReferenceEquals(this, obj))
                return true;

            var other = (PackageIdentity)obj;

            return this == other;
        }

        protected bool Equals(PackageIdentity other)
        {
            return Equals(PackageId, other.PackageId)
                   && Equals(Version, other.Version);
        }

        public override int GetHashCode()
        {
            unchecked
            {   //Generated by rider
                return (PackageId.GetHashCode() * 397) ^ Version.GetHashCode();
            }
        }

        public static bool operator == (PackageIdentity first, PackageIdentity second)
        {               
            return first.PackageId == second.PackageId && first.Version == second.Version;
        }

        public static bool operator !=(PackageIdentity first, PackageIdentity second)
        {
            return !(first == second);
        }

        public override string ToString()
        {
            return $"{PackageId} v{Version}";
        }
    }
}