using System;
using System.Collections.Generic;
using System.Linq;
using Calamari.Common.Features.Packages;
using Calamari.Common.Plumbing.Commands.Options;
using Calamari.Common.Plumbing.Deployment.PackageRetention.VersionFormatDiscovery;
using Calamari.Common.Plumbing.Variables;
using Calamari.Deployment.PackageRetention;
using Newtonsoft.Json;
using Octopus.Versioning;
using Octopus.Versioning.Semver;
namespace Calamari.Common.Plumbing.Deployment.PackageRetention
{
    public class PackageIdentity
    {
        public PackageId PackageId { get; }
        public IVersion Version { get; }

        public PackageIdentity(string packageId, string version, VersionFormat versionFormat = VersionFormat.Semver)
            : this(new PackageId(packageId), VersionFactory.CreateVersion(version, versionFormat))
        {
        }

        public PackageIdentity(IVariables variables, VersionFormat versionFormat = VersionFormat.Semver)
        {
            if (variables == null) throw new ArgumentNullException(nameof(variables));

            var package = variables.Get(PackageVariables.PackageId) ?? throw new Exception("Package ID not found.");
            var version = variables.Get(PackageVariables.PackageVersion) ?? throw new Exception("Package Version not found.");
            var Path = variables.Get(TentacleVariables.CurrentDeployment.PackageFilePath);

            var nullableVersion = VersionFactory.TryCreateVersion(version, versionFormat);
            Version = nullableVersion ?? throw new Exception("Unable to determine package version.");

            PackageId = new PackageId(package);
        }

        [JsonConstructor]
        public PackageIdentity(PackageId packageId, IVersion version)
        {
            PackageId = packageId ?? throw new ArgumentNullException(nameof(packageId));
            Version = version ?? throw new ArgumentNullException(nameof(version));
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj) || obj.GetType() != this.GetType())
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            var other = (PackageIdentity)obj;
            return this == other;
        }
        protected bool Equals(PackageIdentity other)
        {
            return Equals(PackageId, other.PackageId)
                   && Equals(Version, other.Version);
        }
        public override int GetHashCode()
        {
            unchecked
            {   //Generated by rider
                return (PackageId.GetHashCode() * 397) ^ Version.GetHashCode();
            }
        }
        public static bool operator == (PackageIdentity first, PackageIdentity second)
        {
            return first.PackageId == second.PackageId && first.Version == second.Version;
        }
        public static bool operator !=(PackageIdentity first, PackageIdentity second)
        {
            return !(first == second);
        }
        public override string ToString()
        {
            return $"{PackageId} v{Version}";
        }

        static List<ITryToDiscoverVersionFormat> versionFormatDiscoverers = new List<ITryToDiscoverVersionFormat>();

        public static void SetVersionFormatDiscoverers(params ITryToDiscoverVersionFormat[] formatDiscoverers)
        {
            versionFormatDiscoverers = new List<ITryToDiscoverVersionFormat>(formatDiscoverers);
        }

        public static PackageIdentity GetPackageIdentity(IManagePackageUse journal, IVariables variables, string[] commandLineArguments)
        {
            var packageStr = variables.Get(PackageVariables.PackageId) ?? throw new Exception("Package Id not found.");
            var versionStr = variables.Get(PackageVariables.PackageVersion) ?? throw new Exception("Package Version not found.");
            var packagePath = variables.Get(TentacleVariables.CurrentDeployment.PackageFilePath);
            var packageId = new PackageId(packageStr);
            var versionFormat = VersionFormat.Semver;

            // ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            versionFormatDiscoverers.FirstOrDefault(d => d.TryDiscoverVersionFormat(journal, variables, commandLineArguments, out versionFormat));
;
            return new PackageIdentity(packageId, VersionFactory.CreateVersion(versionStr, versionFormat));
        }
    }
}