<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <Version>1.0.0.0</Version>
    <TargetFrameworks>net452;netstandard2.1</TargetFrameworks>
    <PlatformTarget>anycpu</PlatformTarget>
    <AssemblyName>Calamari.Azure</AssemblyName>
    <OutputType>Library</OutputType>
    <PackageId>Calamari.Azure</PackageId>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <Authors>Octopus Deploy</Authors>
    <Copyright>Octopus Deploy Pty Ltd</Copyright>
    <PackageTags>tool</PackageTags>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/OctopusDeploy/Calamari/</RepositoryUrl>
    <PackageProjectUrl>https://github.com/OctopusDeploy/Calamari/</PackageProjectUrl>
    <PackageLicenseUrl>https://github.com/OctopusDeploy/Calamari/blob/master/LICENSE.txt</PackageLicenseUrl>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Description>Contains the command-line Calamari tool, plus additional commands for Azure integration.</Description>
    <ApplicationManifest>Calamari.Azure.exe.manifest</ApplicationManifest>
    <ApplicationIcon />
    <StartupObject />
    <DefineConstants>$(DefineConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <OutputPath>bin\Debug\</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <OutputPath>bin\Release\</OutputPath>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include="Scripts\*" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Calamari.Azure.Accounts\Calamari.Azure.Accounts.csproj" />
    <ProjectReference Include="..\Calamari.Shared\Calamari.Shared.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Azure.Management.ResourceManager" Version="3.3.0-preview" />
    <PackageReference Include="Microsoft.DotNet.Analyzers.Compatibility" Version="0.2.12-alpha">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Newtonsoft.Json" Version="10.0.3" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net452'">
    <PackageReference Include="Octopus.Dependencies.AzureBinaries" Version="2.9.0" />
    <PackageReference Include="Octopus.Dependencies.AzureCmdlets" Version="6.11.0" />
  </ItemGroup>
  <ItemGroup>
    <None Update="Calamari.Azure.exe.manifest">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <Target Name="GetToolFiles">
    <CreateItem Include="@(PackageDefinitions)" Condition="'%(Name)' == 'FSharp.Compiler.Tools'">
      <Output TaskParameter="Include" ItemName="FSharpCompilerToolsRef" />
    </CreateItem>
    <CreateItem Include="@(PackageDefinitions)" Condition="'%(Name)' == 'ScriptCS'">
      <Output TaskParameter="Include" ItemName="ScriptCSRef" />
    </CreateItem>
    <PropertyGroup>
      <FSharpCompilerTools>@(FSharpCompilerToolsRef->'%(ResolvedPath)')/tools/*.*</FSharpCompilerTools>
      <ScriptCS>@(ScriptCSRef->'%(ResolvedPath)')/tools/*.*</ScriptCS>
    </PropertyGroup>
    <ItemGroup>
      <FSharpFiles Include="$(FSharpCompilerTools)" />
      <ScriptCSFiles Include="$(ScriptCS)" />
    </ItemGroup>
  </Target>
  <Target Name="CopyToolsAfterBuild" AfterTargets="Build" DependsOnTargets="GetToolFiles">
    <Copy SourceFiles="@(FSharpFiles)" DestinationFolder="$(OutDir)/FSharp/" />
    <Copy SourceFiles="@(ScriptCSFiles)" DestinationFolder="$(OutDir)/ScriptCS/" />
  </Target>
  <Target Name="CopyToolsAfterPublish" AfterTargets="Publish" DependsOnTargets="GetToolFiles">
    <Copy SourceFiles="@(FSharpFiles)" DestinationFolder="$(PublishDir)/FSharp/" />
    <Copy SourceFiles="@(ScriptCSFiles)" DestinationFolder="$(PublishDir)/ScriptCS/" />
  </Target>
  <Target Condition="$([MSBuild]::IsOSUnixLike())" Name="Build">
    <Message Text="This build is unsupported on unix like environments" />
  </Target>
  <Import Condition="!$([MSBuild]::IsOSUnixLike())" Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>